import pygame
from random import random

pygame.init()


class Image:
    def __init__(self, screen, pos=(0.0, 0.0), scale=(100.0, 100.0), rot=0, image=""):
        self.screen = screen
        self.pos = pos
        self.scale = scale
        self.rotate = rot
        self.image = pygame.image.load(image)

    def blit(self):
        self.image_edited = pygame.transform.scale(self.image, self.scale)
        self.image_edited = pygame.transform.rotate(self.image_edited, self.rotate)
        self.rect = self.image_edited.get_rect(x=self.pos[0], y=self.pos[1])
        self.screen.blit(self.image_edited, self.rect)

    def click(self):
        mouse = pygame.mouse.get_pressed()
        mouse_pos = pygame.mouse.get_pos()
        if self.rect.collidepoint(mouse_pos[0], mouse_pos[1]) and mouse[0]:
            return True
        else:
            return False

    def touch(self, pos, scale):
        ax1 = self.pos[0]
        ax2 = ax1 + self.scale[0]
        ay1 = self.pos[1]
        ay2 = ay1 + self.scale[1]

        bx1 = pos[0]
        bx2 = bx1 + scale[0]
        by1 = pos[1]
        by2 = by1 + scale[1]

        # print(ax1, ax2, ay1, ay2, bx1, bx2, by1, by2)

        if (((ax1 < bx1 and ax2 < bx1) or (ax1 > bx2 and ax2 > bx2))
                or ((ay1 < by1 and ay2 < by1) or (ay1 > by2 and ay2 > by2))):
            return False
        else: return True

def moveUp():
    global y
    global speed
    global f
    global otstup
    if y > 0:
        y -= speed


def moveDown():
    global y
    global speed
    global f
    global shir
    if y + speed + shir <= f[1]:
        y += speed


def moveRight():
    global x
    global speed
    global shir
    if x + speed + shir <= f[0]:
        x += speed


def moveLeft():
    global x
    global speed
    if x > f[1] / 2 + 10 + otstup:
        x -= speed

def restart ():
    global f, x, y, shir, bonus1, play, otstup, speed, devaiz, cord
    x = int(f[0] / 2)
    y = int(f[1] / 2 - shir / 2)
    bonus1 = 0
    play = False
    speed = 30
    if devaiz == 3: speed = 10
    cord = [x, -shir, int(f[1] / 2 + 10 + otstup), int(f[1] / 2 - shir / 2),
            f[0] - x, f[1], f[0] + 3, int(f[1] / 2 - shir / 2)]

    z_x, z_y, z_shir_x, z_shir_y = [int(f[1] / 2 + 10 + otstup), 300, int(shir//3*2), int(shir*260/270)]


info = pygame.display.Info()
devaiz = 0
f = (info.current_w, info.current_h)
if devaiz == 3:
    f = (2186 / 2, 1080 / 2)
win = pygame.display.set_mode(f)
doit = True
fs06 = f[1] / 6
fs03 = f[1] / 3
otstup = 12
knopkaW = Image(win, (fs06 + otstup, f[1] / 2 - fs06 * 1.5), (int(fs06), int(fs03)), 0, image="button1w.png")
knopkaS = Image(win, (fs06 + otstup, f[1] / 2 - fs06 / 2), (int(fs06), int(fs03)), 180, image="button1w.png")
knopkaD = Image(win, (fs06 + otstup, f[1] / 2 - fs06 / 2), (int(fs06), int(fs03)), -90, image="button1w.png")
knopkaA = Image(win, (otstup, f[1] / 2 - fs06 / 2), (int(fs06), int(fs03)), 90, image="button1w.png")

# --- === player === ---
speed = 30
if devaiz == 3: speed = 10
shir = int(f[1] / 9)
x = int(f[0] / 2)
y = int(f[1] / 2 - shir / 2)
bonus1 = 0
play = False

# --- === kaktus === ---
cord = [x, -shir, int(f[1] / 2 + 10 + otstup), int(f[1] / 2 - shir / 2),
        f[0] - x, f[1], f[0] + 3, int(f[1] / 2 - shir / 2)]

z_x, z_y, z_shir_x, z_shir_y = [int(f[1] / 2 + 10 + otstup), 300, int(shir//3*2), int(shir*260/270)]
zel = Image(win, (z_x, z_y), (z_shir_x, z_shir_y), 0, image="zel.png")

while doit:

    keys = pygame.key.get_pressed()


    if devaiz != 3: pygame.time.delay(20)  # задержка
    else: pygame.time.delay(30)
    pygame.draw.rect(win, (254, 185, 107), (0, 0, f[0], f[1]))

    hero = Image(win, (x, y), (shir, shir), 0, image="pers1.png")
    hero.blit()

    if hero.touch((z_x, z_y), (z_shir_x, z_shir_y)):
        bonus1 += 1
        speed += 0.1
        z_x = int(random()*f[0]//2 + f[1] / 2 + 10 + otstup)
        z_y = int(random()*f[1])
        for i in range(0, 200):
            if z_y >= f[1]-i:
                z_y -= z_shir_y
        zel = Image(win, (z_x, z_y), (z_shir_x, z_shir_y), 0, image="zel.png")

    # 1k
    if cord[1] > f[1] + shir:
        cord[1] = -shir
        cord[0] = x
    kaktus = Image(win, (cord[0], cord[1]), (shir, shir), 180, image="kaktus1.png")
    kaktus.blit()

    # 2k
    if cord[2] > f[0] + shir:
        cord[2] = int(f[1] / 2 + 10 + otstup - shir)
        cord[3] = y
    kaktus = Image(win, (cord[2], cord[3]), (shir, shir), -90, image="kaktus1.png")
    kaktus.blit()

    # 3k
    if cord[5] < -shir:
        cord[4] = x
        cord[5] = f[1]
    kaktus = Image(win, (cord[4], cord[5]), (shir, shir), 0, image="kaktus1.png")
    kaktus.blit()

    # 4k
    if cord[6] < int(f[1] / 2 + 13 + otstup - shir):
        cord[6] = f[0]
        cord[7] = y
    kaktus = Image(win, (cord[6], cord[7]), (shir, shir), 90, image="kaktus1.png")
    kaktus.blit()

    #if hero.touch([cord[0], cord[1]], [shir, shir]):
    #    restart()
    #elif hero.touch([cord[2], cord[3]], [shir, shir]):
    #    restart()
    #elif hero.touch([cord[4], cord[5]], [shir, shir]):
    #    restart()
    #elif hero.touch([cord[6], cord[7]], [shir, shir]):
    #    restart()
        #doit = False

    pygame.draw.rect(win, (100, 100, 100), (0, 0, f[1] / 2 + 10 + otstup, f[1]))


    for event in pygame.event.get():
        # exit
        if event.type == pygame.QUIT or keys[pygame.K_x]:
            doit = False

    resButton = Image(win, (otstup, f[1]-otstup-shir//2*3), (shir//2*3, shir//2*3), 0, image="restart.png")
    resButton.blit()
    if resButton.click() or keys[pygame.K_r]:
        restart()

    knopkaS.blit()
    knopkaW.blit()
    knopkaD.blit()
    knopkaA.blit()

    zel.blit()
    if keys[pygame.K_p]: play = not play

    if play:
        cord[1] += speed / 3
        cord[2] += speed / 3
        cord[5] -= speed / 3
        cord[6] -= speed / 3
        elves = False
        if knopkaS.click() or keys[pygame.K_s]:
            moveDown()
            elves = True

        if knopkaW.click() or keys[pygame.K_w]:
            moveUp()
            elves = True

        if knopkaD.click() or keys[pygame.K_d]:
            moveRight()
            elves = True

        if knopkaA.click() or keys[pygame.K_a]:
            moveLeft()
            elves = True
        goToPauseButton = Image(win, (f[1] / 2 - shir*2, otstup), (shir//2*3, shir//2*3), 0, image="pause.png")
        goToPauseButton.blit()
        if goToPauseButton.click():
            play = False
    else:
        goToGameButton = Image(win, (otstup, otstup), (shir//2*3, shir//2*3), 0, image="play.png")
        goToGameButton.blit()
        if goToGameButton.click():
            play = True
    pygame.display.update()
print(pygame.mouse.get_pos())
